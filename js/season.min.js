"use strict";class Season{constructor(){this.list=JSON.parse(localStorage.getItem("season"))??{},this.set().then((e=>{for(const t in this.list){const s=e[t];s&&(CAL.shows[s]=[!1,!1],delete this.list[t],localStorage.setItem("season",JSON.stringify(this.list)))}localStorage.setItem("shows",JSON.stringify(CAL.shows))}))}async set(){return await(await fetch("shows/keys.json")).json()}async init(){const e=document.createElement("div");e.id="season",e.tabIndex=1,document.body.append(e);const t=await(await fetch("season/shows.json")).json();let s=0;for(const n in"Your List"===document.getElementById("list").innerHTML?t:this.list){const o=document.createElement("div");o.className="show-season";const i=document.createElement("table");i.className="info";const c=document.createElement("tr"),r=document.createElement("th");r.innerHTML=n,c.append(r),i.append(c);for(const c in t[n])switch(c){case"cover":const r=document.createElement("div");r.className="cover-season",r.align="right";const a=document.createElement("img");if(a.src=t[n][c],a.width=340,a.height=440,s>2){a.src+="?w=5&h=5";const t=new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(!e.isIntersecting)return;const s=e.target;s.src=s.src.substring(0,s.src.length-8),t.unobserve(s)}))}),{root:e,rootMargin:"500px 0px"});t.observe(a),a.loading="lazy"}else s++;r.append(a),o.append(r);break;case"Genres":i.append(this.row(c,t[n][c].join(", ")));break;default:i.append(this.row(c,t[n][c]))}const a=document.createElement("button");a.innerHTML=n in this.list?"Remove":"Add",a.onclick=e=>{const t=e.srcElement.previousElementSibling.childNodes[0].innerText;if(t in this.list)delete this.list[t],e.srcElement.innerHTML="Add";else{this.list[t]=null,e.srcElement.innerHTML="Remove";const s={};for(const e of Object.keys(this.list).sort())s[e]=null;this.list=s}localStorage.setItem("season",JSON.stringify(this.list))},o.append(i),o.append(a),e.append(o)}}row(e,t){const s=document.createElement("tr"),n=document.createElement("td");return n.innerHTML=`${e}: ${t}`,s.append(n),s}}
